#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ArduinoJson.h>
#include <SoftwareSerial.h>

const char *ssid = "your_password";
const char *password = "your_ssid";
const int serverPort = 80;

const int ready_flag = D9;
const int pins[] = {D0, D1, D2, D3, D4, D5, D6, D7}; // Replace with the GPIO pins you want to use

ESP8266WebServer server(serverPort);

void setup() {
  Serial.begin(115200);
  Serial.end(); // Disable Serial communication to use D9 as GPIO pin

  for (int i = 0; i < 8; i++) {
    pinMode(pins[i], OUTPUT);
  }
  pinMode(ready_flag, OUTPUT); // Add this line to set ready_flag pin as OUTPUT
  WiFi.mode(WIFI_AP);
  WiFi.softAP(ssid, password);

  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(IP);

  server.on("/sendArray", HTTP_POST, handleArray);
  server.on("/test", HTTP_POST, testArray);
  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  server.handleClient();
}

void outputToPins(uint8_t value) {
  digitalWrite(ready_flag,HIGH);
  delay(10);
  for (int i = 0; i < 8; i++) {
    digitalWrite(pins[i], (value >> i) & 1);
  }
  delay(10);
  digitalWrite(ready_flag,LOW);
  delay(10);
}

void testArray() {
  if (server.hasArg("plain")) {
    String receivedArray = server.arg("plain");
    server.send(200, "text/plain", "Array received and processed: " + receivedArray);
  } else {
    server.send(400, "text/plain", "Missing array data");
  }
}

void handleArray() {
  if (server.hasArg("plain")) {
    int fpgaFlag = digitalRead(D8);
    if (fpgaFlag == 0) {
      server.send(503, "text/plain", "FPGA is busy");
    } else if (fpgaFlag == 1) {
      String receivedArray = server.arg("plain");
      Serial.println("Received array: " + receivedArray);

      // Parse the received array
      DynamicJsonDocument doc(1024);
      deserializeJson(doc, receivedArray);
      JsonArray array = doc.as<JsonArray>();

      // Output the array elements as 8-bit values to the selected pins
      for (int value : array) {
        outputToPins(value & 0xFF);
        delay(10); // Add a small delay 
      }

      // Send a success response
      server.send(200, "text/plain", "Array received and processed");
    } else {
      // If the received flag value is unexpected or invalid
      server.send(400, "text/plain", "Invalid FPGA flag value");
    }
  } else {
    server.send(400, "text/plain", "Missing array data");
  }
} 
