#include <Stepper.h>
#include <Servo.h>

#define NUM_SERVOS 13  // replace with the number of your servos
#define NUM_STEPPERS 2  // the number of your stepper motors
#define START_CHAR '<'
#define END_CHAR '>'

Servo servos[NUM_SERVOS];
Stepper steppers[NUM_STEPPERS] = {
  Stepper(STEPS_PER_MOTOR_REVOLUTION, 8, 9, 10, 11),
  Stepper(STEPS_PER_MOTOR_REVOLUTION, 4, 5, 6, 7)
};

void setup() {
  Serial.begin(9600);
  for (int i = 0; i < NUM_SERVOS; i++) {
    servos[i].attach(i+2);  // assumes servos are on pins 2 through NUM_SERVOS+1
  }
}

void loop() {
  if (Serial.available()) {
    static String received = "";
    char inChar = (char)Serial.read();
    if (inChar == START_CHAR) {
      received = "";  // start a new message
    } else if (inChar == END_CHAR) {
      parseAndMoveServosAndSteppers(received);  // complete message received
    } else {
      received += inChar;  // add to the message
    }
  }
}

void parseAndMoveServosAndSteppers(String received) {
  int deviceNum = 0;
  int startIdx = 0;
  int commaIdx = received.indexOf(',');
  while (commaIdx != -1 && deviceNum < NUM_SERVOS) {
    servos[deviceNum++].write(received.substring(startIdx, commaIdx).toInt());
    startIdx = commaIdx+1;
    commaIdx = received.indexOf(',', startIdx);
  }
  if (deviceNum < NUM_SERVOS) {
    servos[deviceNum].write(received.substring(startIdx).toInt());
  }
  
  for (int i = 0; i < NUM_STEPPERS; i++) {
    commaIdx = received.indexOf(',', startIdx);
    int direction = received.substring(startIdx, commaIdx).toInt();
    if (direction == 1) {
      steppers[i].step(STEPS_PER_MOTOR_REVOLUTION);  // 1 full revolution clockwise
    } else if (direction == 2) {
      steppers[i].step(-STEPS_PER_MOTOR_REVOLUTION);  // 1 full revolution counter-clockwise
    }
    startIdx = commaIdx+1;
  }
}
