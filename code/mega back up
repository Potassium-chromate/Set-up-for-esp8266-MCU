#include <Servo.h>

#define NUM_SERVOS 1  // replace with the number of your servos
#define NUM_STEPPERS 2  // the number of your stepper motors
#define NUM_DC 2  
#define START_CHAR '<'
#define END_CHAR '>'
const int stepper1[] = {35,36,37}; // dirPin stepPin enPin
const int stepper2[] = {38,39,40};
const int DC1[] = {41,42};
const int DC2[] = {43,44};

Servo servos[NUM_SERVOS];

void setup() {
  Serial.begin(9600);
  for (int i = 0; i < NUM_SERVOS; i++) {
    servos[i].attach(i+22);  // assumes servos are on pins 2 through NUM_SERVOS+1 22~
  }
  for (int i = 0; i < 3; i++) {
    pinMode(stepper1[i],OUTPUT);
    pinMode(stepper2[i],OUTPUT);
    pinMode(DC1[i],OUTPUT);
    pinMode(DC2[i],OUTPUT);
  }
  digitalWrite(stepper1[2],LOW);
  digitalWrite(stepper2[2],LOW);
  digitalWrite(DC1[0],LOW);
  digitalWrite(DC1[1],LOW);
  digitalWrite(DC2[0],LOW);
  digitalWrite(DC2[1],LOW);
}

void loop() {
  if (Serial.available()) {
    static String received = "";
    char inChar = (char)Serial.read();
    if (inChar == START_CHAR) {
      received = "";  // start a new message
    } else if (inChar == END_CHAR) {
      parseAndMoveServosAndSteppers(received);  // complete message received
    } else {
      received += inChar;  // add to the message
    }
  }
}

void parseAndMoveServosAndSteppers(String received) {
  int deviceNum = 0;
  int startIdx = 0;
  int commaIdx = received.indexOf(',');
  while (commaIdx != -1 && deviceNum < NUM_SERVOS) {
    servos[deviceNum++].write(received.substring(startIdx, commaIdx).toInt());
    startIdx = commaIdx+1;
    commaIdx = received.indexOf(',', startIdx);
  }
  if (deviceNum < NUM_SERVOS) {
    servos[deviceNum].write(received.substring(startIdx).toInt());
  }
  
  for (int i = 0; i < NUM_STEPPERS; i++) {
    commaIdx = received.indexOf(',', startIdx);
    int direction = received.substring(startIdx, commaIdx).toInt();
    int dirPin, stepPin;
    if(i==0) {
      dirPin = stepper1[0];
      stepPin = stepper1[1];
    } else {
      dirPin = stepper2[0];
      stepPin = stepper2[1];
    }
    if (direction == 1) {
      digitalWrite(dirPin,HIGH); // Enables the motor to move in a particular direction
      for(int x = 0; x < 200; x++) {
        digitalWrite(stepPin,HIGH); 
        delayMicroseconds(500); 
        digitalWrite(stepPin,LOW); 
        delayMicroseconds(500); 
      }
      delay(500); // One second delay
    } else if (direction == 2) {
      digitalWrite(dirPin,LOW); // Changes the direction of rotation
      for(int x = 0; x < 200; x++) {
        digitalWrite(stepPin,HIGH); 
        delayMicroseconds(500); 
        digitalWrite(stepPin,LOW); 
        delayMicroseconds(500); 
      }
      delay(500); // One second delay
    }
    startIdx = commaIdx+1;
  }
  for (int i = 0; i < NUM_DC; i++) {
    commaIdx = received.indexOf(',', startIdx);
    int direction = received.substring(startIdx, commaIdx).toInt(); // 1: forward 2: backword
    int Pin1, Pin2;
    if(i==0) {
      Pin1 = DC1[0];
      Pin2 = DC1[1];
    } else {
      Pin1 = DC2[0];
      Pin2 = DC2[1];
    }
    if (direction == 1) {
      digitalWrite(Pin1,HIGH);   
      digitalWrite(Pin2,LOW);   
    } else if (direction == 2) {
      digitalWrite(Pin1,LOW);   
      digitalWrite(Pin2,HIGH);   
    }
    startIdx = commaIdx+1;
  }
  delay(100); // 0.1 second delay
  digitalWrite(DC1[0],LOW);
  digitalWrite(DC1[1],LOW);
  digitalWrite(DC2[0],LOW);
  digitalWrite(DC2[1],LOW);
  startIdx = commaIdx+1;
}
